-- PyLua Type Definitions
-- Type definitions for the PyLua virtual machine and objects

-- Basic type aliases
export type Any = any
export type Nil = nil

-- Bytecode instruction structure
export type Instruction = {
    op: string,           -- Opcode identifier (string)
    arg: number?,         -- Primary argument
    target: number?,      -- Secondary argument (for method calls, etc.)
    line: number?,        -- Source line number for debugging
    name: string?,        -- Function name (for MAKE_FUNCTION)
    parameters: {string}?, -- Function parameters (for MAKE_FUNCTION)
    bytecode: Bytecode?,  -- Function bytecode (for MAKE_FUNCTION)
    defaults: {Any}?,     -- Default parameter values (for MAKE_FUNCTION)
    closure: {Any}?       -- Closure variables (for MAKE_FUNCTION)
}

-- Bytecode structure
export type Bytecode = {
    constants: {Any},     -- Constants table
    names: {string},      -- Names table
    code: {Instruction},  -- Instructions array
    sourceLines: {string}? -- Original source lines for error reporting
}

-- Virtual machine state
export type VM = {
    stack: {Any},         -- Execution stack
    stackPointer: number, -- Current stack position
    pc: number,           -- Program counter (instruction pointer)
    constants: {Any},     -- Constants table from bytecode
    names: {string},      -- Names table from bytecode
    code: {Instruction},  -- Code instructions from bytecode
    variables: {[string]: Any}, -- Runtime variables storage
    builtins: {[string]: Any},  -- Built-in functions from core module
    returnValue: Any,     -- Last return value
    
    -- Recursion tracking
    callDepth: number,    -- Current function call depth
    maxCallDepth: number, -- Maximum allowed call depth (recursion limit)
    
    -- Error handling and debugging
    sourceLines: {string}, -- Original source code lines for error reporting
    debug: boolean        -- Debug mode flag
}

-- Iterator types for for-loops
export type Iterator = {
    type: string,         -- Iterator type ("list", "sequence", etc.)
    data: {Any},          -- Data being iterated over
    index: number,        -- Current iteration index
    length: number        -- Total length of data
}

-- Python object types
export type PyObject = {
    __type: string,       -- Python type name
    __value: Any,         -- Actual value/data
    __methods: {[string]: Any}?, -- Object methods
    __dict: {[string]: Any}?     -- Object attributes
}

export type PyFunction = {
    __type: "function",
    __value: {
        name: string?,
        parameters: {string},
        bytecode: Bytecode,
        defaults: {Any}?,
        closure: {Any}?
    }
}

export type PyList = {
    __type: "list",
    __value: {Any},
    __methods: {[string]: Any}
}

export type PyDict = {
    __type: "dict",
    __value: {[Any]: Any},
    __methods: {[string]: Any}
}

export type PyTuple = {
    __type: "tuple",
    __value: {Any}
}

export type PySet = {
    __type: "set",
    __value: {[Any]: boolean},
    __methods: {[string]: Any}
}

-- Execution options
export type ExecutionOptions = {
    debug: boolean?       -- Enable debug mode
}

-- Runtime error information
export type RuntimeErrorInfo = {
    errorType: string,    -- Error type (e.g., "TypeError", "NameError")
    message: string,      -- Error message
    suggestion: string?,  -- Optional suggestion for fixing the error
    line: number?,        -- Line number where error occurred
    instruction: Instruction? -- Instruction that caused the error
}

-- Function call result
export type CallResult = {
    success: boolean,     -- Whether the call succeeded
    result: Any,          -- Return value (if successful)
    error: string?        -- Error message (if failed)
}

-- Compiler types
export type CompilerState = {
    constants: {Any},      -- Constants table
    names: {string},       -- Variable/function names table
    code: {Instruction},   -- Generated bytecode instructions
    constantsMap: {[string]: number}, -- Map to avoid duplicate constants
    namesMap: {[string]: number},     -- Map to avoid duplicate names
    lineNumber: number     -- Current line number for debugging
}

export type TokenPosition = number

-- Compilation result
export type CompileResult = {
    success: boolean,
    bytecode: Bytecode?,
    error: string?
}

return {}
